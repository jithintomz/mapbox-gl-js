define(["./chunk1.js"],function(e){"use strict";function t(e){var i=typeof e;if("number"===i||"boolean"===i||"string"===i||void 0===e||null===e)return JSON.stringify(e);if(Array.isArray(e)){for(var r="[",o=0,n=e;o<n.length;o+=1){r+=t(n[o])+","}return r+"]"}for(var a=Object.keys(e).sort(),s="{",l=0;l<a.length;l++)s+=JSON.stringify(a[l])+":"+t(e[a[l]])+",";return s+"}"}function i(i){for(var r="",o=0,n=e.default$20;o<n.length;o+=1){r+="/"+t(i[n[o]])}return r}var r=function(e){e&&this.replace(e)};function o(e,t,i,r,o){if(void 0===t.segment)return!0;for(var n=t,a=t.segment+1,s=0;s>-i/2;){if(--a<0)return!1;s-=e[a].dist(n),n=e[a]}s+=e[a].dist(e[a+1]),a++;for(var l=[],u=0;s<i/2;){var h=e[a-1],c=e[a],f=e[a+1];if(!f)return!1;var p=h.angleTo(c)-c.angleTo(f);for(p=Math.abs((p+3*Math.PI)%(2*Math.PI)-Math.PI),l.push({distance:s,angleDelta:p}),u+=p;s-l[0].distance>r;)u-=l.shift().angleDelta;if(u>o)return!1;a++,s+=c.dist(f)}return!0}function n(t,i,r,n,a,s,l,u,h){var c=n?.6*s*l:0,f=Math.max(n?n.right-n.left:0,a?a.right-a.left:0),p=0===t[0].x||t[0].x===h||0===t[0].y||t[0].y===h;return i-f*l<i/4&&(i=f*l+i/4),function t(i,r,n,a,s,l,u,h,c){var f=l/2;var p=0;for(var d=0;d<i.length-1;d++)p+=i[d].dist(i[d+1]);var g=0,v=r-n;var y=[];for(var m=0;m<i.length-1;m++){for(var x=i[m],w=i[m+1],S=x.dist(w),M=w.angleTo(x);v+n<g+S;){var b=((v+=n)-g)/S,_=e.number(x.x,w.x,b),I=e.number(x.y,w.y,b);if(_>=0&&_<c&&I>=0&&I<c&&v-f>=0&&v+f<=p){var T=new e.default$26(_,I,M,m);T._round(),a&&!o(i,T,l,a,s)||y.push(T)}}g+=S}h||y.length||u||(y=t(i,g/2,n,a,s,l,u,!0,c));return y}(t,p?i/2*u%i:(f/2+2*s)*l*u%i,i,c,r,f*l,p,!1,h)}r.prototype.replace=function(e){this._layerConfigs={},this._layers={},this.update(e,[])},r.prototype.update=function(t,r){for(var o=this,n=0,a=t;n<a.length;n+=1){var s=a[n];o._layerConfigs[s.id]=s;var l=o._layers[s.id]=e.default$22(s);l._featureFilter=e.default$16(l.filter)}for(var u=0,h=r;u<h.length;u+=1){var c=h[u];delete o._layerConfigs[c],delete o._layers[c]}this.familiesBySource={};for(var f=0,p=function(e){for(var t={},r=0;r<e.length;r++){var o=i(e[r]),n=t[o];n||(n=t[o]=[]),n.push(e[r])}var a=[];for(var s in t)a.push(t[s]);return a}(e.values(this._layerConfigs));f<p.length;f+=1){var d=p[f].map(function(e){return o._layers[e.id]}),g=d[0];if("none"!==g.visibility){var v=g.source||"",y=o.familiesBySource[v];y||(y=o.familiesBySource[v]={});var m=g.sourceLayer||"_geojsonTileLayer",x=y[m];x||(x=y[m]=[]),x.push(d)}}};var a=function(){this.opacity=0,this.targetOpacity=0,this.time=0};a.prototype.clone=function(){var e=new a;return e.opacity=this.opacity,e.targetOpacity=this.targetOpacity,e.time=this.time,e},e.register("OpacityState",a);var s=function(e,t,i,r,o,n,a,s,l,u,h){var c=a.top*s-l,f=a.bottom*s+l,p=a.left*s-l,d=a.right*s+l;if(this.boxStartIndex=e.length,u){var g=f-c,v=d-p;g>0&&(g=Math.max(10*s,g),this._addLineCollisionCircles(e,t,i,i.segment,v,g,r,o,n,h))}else e.emplaceBack(i.x,i.y,p,c,d,f,r,o,n,0,0);this.boxEndIndex=e.length};s.prototype._addLineCollisionCircles=function(e,t,i,r,o,n,a,s,l,u){var h=n/2,c=Math.floor(o/h),f=1+.4*Math.log(u)/Math.LN2,p=Math.floor(c*f/2),d=-n/2,g=i,v=r+1,y=d,m=-o/2,x=m-o/4;do{if(--v<0){if(y>m)return;v=0;break}y-=t[v].dist(g),g=t[v]}while(y>x);for(var w=t[v].dist(t[v+1]),S=-p;S<c+p;S++){var M=S*h,b=m+M;if(M<0&&(b+=M),M>o&&(b+=M-o),!(b<y)){for(;y+w<b;){if(y+=w,++v+1>=t.length)return;w=t[v].dist(t[v+1])}var _=b-y,I=t[v],T=t[v+1].sub(I)._unit()._mult(_)._add(I)._round(),z=Math.abs(b-d)<h?0:.8*(b-d);e.emplaceBack(T.x,T.y,-n/2,-n/2,n/2,n/2,a,s,l,n/2,z)}}};var l=h,u=h;function h(e,t){if(!(this instanceof h))return new h(e,t);if(this.data=e||[],this.length=this.data.length,this.compare=t||c,this.length>0)for(var i=(this.length>>1)-1;i>=0;i--)this._down(i)}function c(e,t){return e<t?-1:e>t?1:0}function f(t,i,r){void 0===i&&(i=1),void 0===r&&(r=!1);for(var o=1/0,n=1/0,a=-1/0,s=-1/0,u=t[0],h=0;h<u.length;h++){var c=u[h];(!h||c.x<o)&&(o=c.x),(!h||c.y<n)&&(n=c.y),(!h||c.x>a)&&(a=c.x),(!h||c.y>s)&&(s=c.y)}var f=a-o,g=s-n,v=Math.min(f,g),y=v/2,m=new l(null,p);if(0===v)return new e.default$1(o,n);for(var x=o;x<a;x+=v)for(var w=n;w<s;w+=v)m.push(new d(x+y,w+y,y,t));for(var S=function(e){for(var t=0,i=0,r=0,o=e[0],n=0,a=o.length,s=a-1;n<a;s=n++){var l=o[n],u=o[s],h=l.x*u.y-u.x*l.y;i+=(l.x+u.x)*h,r+=(l.y+u.y)*h,t+=3*h}return new d(i/t,r/t,0,e)}(t),M=m.length;m.length;){var b=m.pop();(b.d>S.d||!S.d)&&(S=b,r&&console.log("found best %d after %d probes",Math.round(1e4*b.d)/1e4,M)),b.max-S.d<=i||(y=b.h/2,m.push(new d(b.p.x-y,b.p.y-y,y,t)),m.push(new d(b.p.x+y,b.p.y-y,y,t)),m.push(new d(b.p.x-y,b.p.y+y,y,t)),m.push(new d(b.p.x+y,b.p.y+y,y,t)),M+=4)}return r&&(console.log("num probes: "+M),console.log("best distance: "+S.d)),S.p}function p(e,t){return t.max-e.max}function d(t,i,r,o){this.p=new e.default$1(t,i),this.h=r,this.d=function(t,i){for(var r=!1,o=1/0,n=0;n<i.length;n++)for(var a=i[n],s=0,l=a.length,u=l-1;s<l;u=s++){var h=a[s],c=a[u];h.y>t.y!=c.y>t.y&&t.x<(c.x-h.x)*(t.y-h.y)/(c.y-h.y)+h.x&&(r=!r),o=Math.min(o,e.distToSegmentSquared(t,h,c))}return(r?1:-1)*Math.sqrt(o)}(this.p,o),this.max=this.d+this.h*Math.SQRT2}function g(t,i,r,o,n,a){t.createArrays(),t.symbolInstances=[];var s=512*t.overscaling;t.tilePixelRatio=e.default$8/s,t.compareText={},t.iconsNeedLinear=!1;var l=t.layers[0].layout,u=t.layers[0]._unevaluatedLayout._values,h={};if("composite"===t.textSizeData.functionType){var c=t.textSizeData.zoomRange,f=c.min,p=c.max;h.compositeTextSizes=[u["text-size"].possiblyEvaluate(new e.default$25(f)),u["text-size"].possiblyEvaluate(new e.default$25(p))]}if("composite"===t.iconSizeData.functionType){var d=t.iconSizeData.zoomRange,g=d.min,y=d.max;h.compositeIconSizes=[u["icon-size"].possiblyEvaluate(new e.default$25(g)),u["icon-size"].possiblyEvaluate(new e.default$25(y))]}h.layoutTextSize=u["text-size"].possiblyEvaluate(new e.default$25(t.zoom+1)),h.layoutIconSize=u["icon-size"].possiblyEvaluate(new e.default$25(t.zoom+1)),h.textMaxSize=u["text-size"].possiblyEvaluate(new e.default$25(18));for(var m=24*l.get("text-line-height"),x="map"===l.get("text-rotation-alignment")&&"line"===l.get("symbol-placement"),w=l.get("text-keep-upright"),S=0,M=t.features;S<M.length;S+=1){var b=M[S],_=l.get("text-font").evaluate(b).join(","),I=i[_]||{},T=r[_]||{},z={},P=b.text;if(P){var k=l.get("text-offset").evaluate(b).map(function(e){return 24*e}),L=24*l.get("text-letter-spacing").evaluate(b),$=e.allowsLetterSpacing(P)?L:0,D=l.get("text-anchor").evaluate(b),O=l.get("text-justify").evaluate(b),C="line"!==l.get("symbol-placement")?24*l.get("text-max-width").evaluate(b):0;z.horizontal=e.shapeText(P,I,C,m,D,O,$,k,24,e.WritingMode.horizontal),e.allowsVerticalWritingMode(P)&&x&&w&&(z.vertical=e.shapeText(P,I,C,m,D,O,$,k,24,e.WritingMode.vertical))}var A=void 0;if(b.icon){var E=o[b.icon];E&&(A=e.shapeIcon(n[b.icon],l.get("icon-offset").evaluate(b),l.get("icon-anchor").evaluate(b)),void 0===t.sdfIcons?t.sdfIcons=E.sdf:t.sdfIcons!==E.sdf&&e.warnOnce("Style sheet warning: Cannot mix SDF and non-SDF icons in one buffer"),E.pixelRatio!==t.pixelRatio?t.iconsNeedLinear=!0:0!==l.get("icon-rotate").constantOr(1)&&(t.iconsNeedLinear=!0))}(z.horizontal||A)&&v(t,b,z,A,T,h)}a&&t.generateCollisionDebugBuffers()}function v(t,i,r,o,l,u){var h=u.layoutTextSize.evaluate(i),c=u.layoutIconSize.evaluate(i),p=u.textMaxSize.evaluate(i);void 0===p&&(p=h);var d=t.layers[0].layout,g=d.get("text-offset").evaluate(i),v=d.get("icon-offset").evaluate(i),x=h/24,w=t.tilePixelRatio*x,S=t.tilePixelRatio*p/24,M=t.tilePixelRatio*c,b=t.tilePixelRatio*d.get("symbol-spacing"),_=d.get("text-padding")*t.tilePixelRatio,I=d.get("icon-padding")*t.tilePixelRatio,T=d.get("text-max-angle")/180*Math.PI,z="map"===d.get("text-rotation-alignment")&&"line"===d.get("symbol-placement"),P="map"===d.get("icon-rotation-alignment")&&"line"===d.get("symbol-placement"),k=b/2,L=function(n,h){h.x<0||h.x>=e.default$8||h.y<0||h.y>=e.default$8||t.symbolInstances.push(function(t,i,r,o,n,l,u,h,c,f,p,d,g,v,m,x,w,S,M,b,_,I){var T,z,P=t.addToLineVertexArray(i,r),k=0,L=0,$=0,D=o.horizontal?o.horizontal.text:"",O=[];o.horizontal&&(T=new s(u,r,i,h,c,f,o.horizontal,p,d,g,t.overscaling),L+=y(t,i,o.horizontal,l,g,M,b,v,P,o.vertical?e.WritingMode.horizontal:e.WritingMode.horizontalOnly,O,_,I),o.vertical&&($+=y(t,i,o.vertical,l,g,M,b,v,P,e.WritingMode.vertical,O,_,I)));var C=T?T.boxStartIndex:t.collisionBoxArray.length,A=T?T.boxEndIndex:t.collisionBoxArray.length;if(n){var E=function(t,i,r,o,n,a,s){var l,u,h,c,f=i.image,p=r.layout,d=i.top-1/f.pixelRatio,g=i.left-1/f.pixelRatio,v=i.bottom+1/f.pixelRatio,y=i.right+1/f.pixelRatio;if("none"!==p.get("icon-text-fit")&&n){var m=y-g,x=v-d,w=p.get("text-size").evaluate(s)/24,S=n.left*w,M=n.right*w,b=n.top*w,_=M-S,I=n.bottom*w-b,T=p.get("icon-text-fit-padding")[0],z=p.get("icon-text-fit-padding")[1],P=p.get("icon-text-fit-padding")[2],k=p.get("icon-text-fit-padding")[3],L="width"===p.get("icon-text-fit")?.5*(I-x):0,$="height"===p.get("icon-text-fit")?.5*(_-m):0,D="width"===p.get("icon-text-fit")||"both"===p.get("icon-text-fit")?_:m,O="height"===p.get("icon-text-fit")||"both"===p.get("icon-text-fit")?I:x;l=new e.default$1(S+$-k,b+L-T),u=new e.default$1(S+$+z+D,b+L-T),h=new e.default$1(S+$+z+D,b+L+P+O),c=new e.default$1(S+$-k,b+L+P+O)}else l=new e.default$1(g,d),u=new e.default$1(y,d),h=new e.default$1(y,v),c=new e.default$1(g,v);var C=r.layout.get("icon-rotate").evaluate(s)*Math.PI/180;if(C){var A=Math.sin(C),E=Math.cos(C),B=[E,-A,A,E];l._matMult(B),u._matMult(B),c._matMult(B),h._matMult(B)}return[{tl:l,tr:u,bl:c,br:h,tex:f.paddedRect,writingMode:void 0,glyphOffset:[0,0]}]}(0,n,l,0,o.horizontal,0,b);z=new s(u,r,i,h,c,f,n,m,x,!1,t.overscaling),k=4*E.length;var B=t.iconSizeData,N=null;"source"===B.functionType?N=[10*l.layout.get("icon-size").evaluate(b)]:"composite"===B.functionType&&(N=[10*I.compositeIconSizes[0].evaluate(b),10*I.compositeIconSizes[1].evaluate(b)]),t.addSymbols(t.icon,E,N,S,w,b,!1,i,P.lineStartIndex,P.lineLength)}var R=z?z.boxStartIndex:t.collisionBoxArray.length,F=z?z.boxEndIndex:t.collisionBoxArray.length;t.glyphOffsetArray.length>=e.default$17.MAX_GLYPHS&&e.warnOnce("Too many glyphs being rendered in a tile. See https://github.com/mapbox/mapbox-gl-js/issues/2907");var G=new a,V=new a;return{key:D,textBoxStartIndex:C,textBoxEndIndex:A,iconBoxStartIndex:R,iconBoxEndIndex:F,textOffset:v,iconOffset:S,anchor:i,line:r,featureIndex:h,feature:b,numGlyphVertices:L,numVerticalGlyphVertices:$,numIconVertices:k,textOpacityState:G,iconOpacityState:V,isDuplicate:!1,placedTextSymbolIndices:O,crossTileID:0}}(t,h,n,r,o,t.layers[0],t.collisionBoxArray,i.index,i.sourceLayerIndex,t.index,w,_,z,g,M,I,P,v,{zoom:t.zoom},i,l,u))};if("line"===d.get("symbol-placement"))for(var $=0,D=function(t,i,r,o,n){for(var a=[],s=0;s<t.length;s++)for(var l=t[s],u=void 0,h=0;h<l.length-1;h++){var c=l[h],f=l[h+1];c.x<i&&f.x<i||(c.x<i?c=new e.default$1(i,c.y+(f.y-c.y)*((i-c.x)/(f.x-c.x)))._round():f.x<i&&(f=new e.default$1(i,c.y+(f.y-c.y)*((i-c.x)/(f.x-c.x)))._round()),c.y<r&&f.y<r||(c.y<r?c=new e.default$1(c.x+(f.x-c.x)*((r-c.y)/(f.y-c.y)),r)._round():f.y<r&&(f=new e.default$1(c.x+(f.x-c.x)*((r-c.y)/(f.y-c.y)),r)._round()),c.x>=o&&f.x>=o||(c.x>=o?c=new e.default$1(o,c.y+(f.y-c.y)*((o-c.x)/(f.x-c.x)))._round():f.x>=o&&(f=new e.default$1(o,c.y+(f.y-c.y)*((o-c.x)/(f.x-c.x)))._round()),c.y>=n&&f.y>=n||(c.y>=n?c=new e.default$1(c.x+(f.x-c.x)*((n-c.y)/(f.y-c.y)),n)._round():f.y>=n&&(f=new e.default$1(c.x+(f.x-c.x)*((n-c.y)/(f.y-c.y)),n)._round()),u&&c.equals(u[u.length-1])||(u=[c],a.push(u)),u.push(f)))))}return a}(i.geometry,0,0,e.default$8,e.default$8);$<D.length;$+=1)for(var O=D[$],C=0,A=n(O,b,T,r.vertical||r.horizontal,o,24,S,t.overscaling,e.default$8);C<A.length;C+=1){var E=A[C],B=r.horizontal;B&&m(t,B.text,k,E)||L(O,E)}else if("Polygon"===i.type)for(var N=0,R=e.default$27(i.geometry,0);N<R.length;N+=1){var F=R[N],G=f(F,16);L(F[0],new e.default$26(G.x,G.y,0))}else if("LineString"===i.type)for(var V=0,J=i.geometry;V<J.length;V+=1){var W=J[V];L(W,new e.default$26(W[0].x,W[0].y,0))}else if("Point"===i.type)for(var Y=0,Z=i.geometry;Y<Z.length;Y+=1)for(var j=0,X=Z[Y];j<X.length;j+=1){var q=X[j];L([q],new e.default$26(q.x,q.y,0))}}function y(t,i,r,o,n,a,s,l,u,h,c,f,p){var d=function(t,i,r,o,n,a,s){for(var l=r.layout.get("text-rotate").evaluate(a)*Math.PI/180,u=r.layout.get("text-offset").evaluate(a).map(function(e){return 24*e}),h=i.positionedGlyphs,c=[],f=0;f<h.length;f++){var p=h[f],d=s[p.glyph];if(d){var g=d.rect;if(g){var v=e.GLYPH_PBF_BORDER+1,y=d.metrics.advance/2,m=o?[p.x+y,p.y]:[0,0],x=o?[0,0]:[p.x+y+u[0],p.y+u[1]],w=d.metrics.left-v-y+x[0],S=-d.metrics.top-v+x[1],M=w+g.w,b=S+g.h,_=new e.default$1(w,S),I=new e.default$1(M,S),T=new e.default$1(w,b),z=new e.default$1(M,b);if(o&&p.vertical){var P=new e.default$1(-y,y),k=-Math.PI/2,L=new e.default$1(5,0);_._rotateAround(k,P)._add(L),I._rotateAround(k,P)._add(L),T._rotateAround(k,P)._add(L),z._rotateAround(k,P)._add(L)}if(l){var $=Math.sin(l),D=Math.cos(l),O=[D,-$,$,D];_._matMult(O),I._matMult(O),T._matMult(O),z._matMult(O)}c.push({tl:_,tr:I,bl:T,br:z,tex:g,writingMode:i.writingMode,glyphOffset:m})}}}return c}(0,r,o,n,0,s,f),g=t.textSizeData,v=null;return"source"===g.functionType?v=[10*o.layout.get("text-size").evaluate(s)]:"composite"===g.functionType&&(v=[10*p.compositeTextSizes[0].evaluate(s),10*p.compositeTextSizes[1].evaluate(s)]),t.addSymbols(t.text,d,v,l,n,s,h,i,u.lineStartIndex,u.lineLength),c.push(t.text.placedSymbolArray.length-1),4*d.length}function m(e,t,i,r){var o=e.compareText;if(t in o){for(var n=o[t],a=n.length-1;a>=0;a--)if(r.dist(n[a])<i)return!0}else o[t]=[];return o[t].push(r),!1}h.prototype={push:function(e){this.data.push(e),this.length++,this._up(this.length-1)},pop:function(){if(0!==this.length){var e=this.data[0];return this.length--,this.length>0&&(this.data[0]=this.data[this.length],this._down(0)),this.data.pop(),e}},peek:function(){return this.data[0]},_up:function(e){for(var t=this.data,i=this.compare,r=t[e];e>0;){var o=e-1>>1,n=t[o];if(i(r,n)>=0)break;t[e]=n,e=o}t[e]=r},_down:function(e){for(var t=this.data,i=this.compare,r=this.length>>1,o=t[e];e<r;){var n=1+(e<<1),a=n+1,s=t[n];if(a<this.length&&i(t[a],s)<0&&(n=a,s=t[a]),i(s,o)>=0)break;t[e]=s,e=n}t[e]=o}},l.default=u;var x=function(t){var i=new e.AlphaImage({width:0,height:0}),r={},o=new e.default$2(0,0,{autoResize:!0});for(var n in t){var a=t[n],s=r[n]={};for(var l in a){var u=a[+l];if(u&&0!==u.bitmap.width&&0!==u.bitmap.height){var h=o.packOne(u.bitmap.width+2,u.bitmap.height+2);i.resize({width:o.w,height:o.h}),e.AlphaImage.copy(u.bitmap,i,{x:0,y:0},{x:h.x+1,y:h.y+1},u.bitmap),s[l]={rect:h,metrics:u.metrics}}}}o.shrink(),i.resize({width:o.w,height:o.h}),this.image=i,this.positions=r};e.register("GlyphAtlas",x);var w=function(t){this.tileID=new e.OverscaledTileID(t.tileID.overscaledZ,t.tileID.wrap,t.tileID.canonical.z,t.tileID.canonical.x,t.tileID.canonical.y),this.uid=t.uid,this.zoom=t.zoom,this.pixelRatio=t.pixelRatio,this.tileSize=t.tileSize,this.source=t.source,this.overscaling=t.overscaling,this.showCollisionBoxes=t.showCollisionBoxes,this.collectResourceTiming=!!t.collectResourceTiming};function S(t,i){for(var r=new e.default$25(i),o=0,n=t;o<n.length;o+=1){n[o].recalculate(r)}}w.prototype.parse=function(t,i,r,o){var n=this;this.status="parsing",this.data=t,this.collisionBoxArray=new e.CollisionBoxArray;var a=new e.default$28(Object.keys(t.layers).sort()),s=new e.default$12(this.tileID,this.overscaling);s.bucketLayerIDs=[];var l,u,h,c={},f={featureIndex:s,iconDependencies:{},glyphDependencies:{}},p=i.familiesBySource[this.source];for(var d in p){var v=t.layers[d];if(v){1===v.version&&e.warnOnce('Vector tile source "'+n.source+'" layer "'+d+'" does not use vector tile spec v2 and therefore may have some rendering errors.');for(var y=a.encode(d),m=[],w=0;w<v.length;w++){var M=v.feature(w);m.push({feature:M,index:w,sourceLayerIndex:y})}for(var b=0,_=p[d];b<_.length;b+=1){var I=_[b],T=I[0];if(!(T.minzoom&&n.zoom<Math.floor(T.minzoom)))if(!(T.maxzoom&&n.zoom>=T.maxzoom))if("none"!==T.visibility)S(I,n.zoom),(c[T.id]=T.createBucket({index:s.bucketLayerIDs.length,layers:I,zoom:n.zoom,pixelRatio:n.pixelRatio,overscaling:n.overscaling,collisionBoxArray:n.collisionBoxArray})).populate(m,f),s.bucketLayerIDs.push(I.map(function(e){return e.id}))}}}var z=e.mapObject(f.glyphDependencies,function(e){return Object.keys(e).map(Number)});Object.keys(z).length?r.send("getGlyphs",{uid:this.uid,stacks:z},function(e,t){l||(l=e,u=t,k.call(n))}):u={};var P=Object.keys(f.iconDependencies);function k(){if(l)return o(l);if(u&&h){var t=new x(u),i=new e.default$29(h);for(var r in c){var n=c[r];n instanceof e.default$17&&(S(n.layers,this.zoom),g(n,u,t.positions,h,i.positions,this.showCollisionBoxes))}this.status="done",o(null,{buckets:e.values(c).filter(function(e){return!e.isEmpty()}),featureIndex:s,collisionBoxArray:this.collisionBoxArray,glyphAtlasImage:t.image,iconAtlasImage:i.image})}}P.length?r.send("getImages",{icons:P},function(e,t){l||(l=e,h=t,k.call(n))}):h={},k.call(this)};var M=function(e){return!(!performance||!performance.getEntriesByName)&&performance.getEntriesByName(e)};function b(t,i){var r=e.getArrayBuffer(t.request,function(t,r){t?i(t):r&&i(null,{vectorTile:new e.default$13.VectorTile(new e.default$14(r.data)),rawData:r.data,cacheControl:r.cacheControl,expires:r.expires})});return function(){r.abort(),i()}}var _=function(e,t,i){this.actor=e,this.layerIndex=t,this.loadVectorData=i||b,this.loading={},this.loaded={}};_.prototype.loadTile=function(t,i){var r=this,o=t.uid;this.loading||(this.loading={});var n=this.loading[o]=new w(t);n.abort=this.loadVectorData(t,function(a,s){if(delete r.loading[o],a||!s)return i(a);var l=s.rawData,u={};s.expires&&(u.expires=s.expires),s.cacheControl&&(u.cacheControl=s.cacheControl);var h={};if(t.request&&t.request.collectResourceTiming){var c=M(t.request.url);c&&(h.resourceTiming=JSON.parse(JSON.stringify(c)))}n.vectorTile=s.vectorTile,n.parse(s.vectorTile,r.layerIndex,r.actor,function(t,r){if(t||!r)return i(t);i(null,e.extend({rawTileData:l.slice(0)},r,u,h))}),r.loaded=r.loaded||{},r.loaded[o]=n})},_.prototype.reloadTile=function(e,t){var i=this.loaded,r=e.uid,o=this;if(i&&i[r]){var n=i[r];n.showCollisionBoxes=e.showCollisionBoxes;var a=function(e,i){var r=n.reloadCallback;r&&(delete n.reloadCallback,n.parse(n.vectorTile,o.layerIndex,o.actor,r)),t(e,i)};"parsing"===n.status?n.reloadCallback=a:"done"===n.status&&n.parse(n.vectorTile,this.layerIndex,this.actor,a)}},_.prototype.abortTile=function(e,t){var i=this.loading,r=e.uid;i&&i[r]&&i[r].abort&&(i[r].abort(),delete i[r]),t()},_.prototype.removeTile=function(e,t){var i=this.loaded,r=e.uid;i&&i[r]&&delete i[r],t()};var I=function(){this.loading={},this.loaded={}};I.prototype.loadTile=function(t,i){var r=t.uid,o=t.encoding,n=new e.default$30(r);this.loading[r]=n,n.loadFromImage(t.rawImageData,o),delete this.loading[r],this.loaded=this.loaded||{},this.loaded[r]=n,i(null,n)},I.prototype.removeTile=function(e){var t=this.loaded,i=e.uid;t&&t[i]&&delete t[i]};var T={RADIUS:6378137,FLATTENING:1/298.257223563,POLAR_RADIUS:6356752.3142};function z(e){var t=0;if(e&&e.length>0){t+=Math.abs(P(e[0]));for(var i=1;i<e.length;i++)t-=Math.abs(P(e[i]))}return t}function P(e){var t,i,r,o,n,a,s=0,l=e.length;if(l>2){for(a=0;a<l;a++)a===l-2?(r=l-2,o=l-1,n=0):a===l-1?(r=l-1,o=0,n=1):(r=a,o=a+1,n=a+2),t=e[r],i=e[o],s+=(k(e[n][0])-k(t[0]))*Math.sin(k(i[1]));s=s*T.RADIUS*T.RADIUS/2}return s}function k(e){return e*Math.PI/180}var L={geometry:function e(t){var i,r=0;switch(t.type){case"Polygon":return z(t.coordinates);case"MultiPolygon":for(i=0;i<t.coordinates.length;i++)r+=z(t.coordinates[i]);return r;case"Point":case"MultiPoint":case"LineString":case"MultiLineString":return 0;case"GeometryCollection":for(i=0;i<t.geometries.length;i++)r+=e(t.geometries[i]);return r}},ring:P},$=function e(t,i){switch(t&&t.type||null){case"FeatureCollection":return t.features=t.features.map(D(e,i)),t;case"Feature":return t.geometry=e(t.geometry,i),t;case"Polygon":case"MultiPolygon":return function(e,t){"Polygon"===e.type?e.coordinates=O(e.coordinates,t):"MultiPolygon"===e.type&&(e.coordinates=e.coordinates.map(D(O,t)));return e}(t,i);default:return t}};function D(e,t){return function(i){return e(i,t)}}function O(e,t){t=!!t,e[0]=C(e[0],t);for(var i=1;i<e.length;i++)e[i]=C(e[i],!t);return e}function C(e,t){return function(e){return L.ring(e)>=0}(e)===t?e:e.reverse()}var A=e.default$13.VectorTileFeature.prototype.toGeoJSON,E=function(t){this._feature=t,this.extent=e.default$8,this.type=t.type,this.properties=t.tags,"id"in t&&!isNaN(t.id)&&(this.id=parseInt(t.id,10))};E.prototype.loadGeometry=function(){if(1===this._feature.type){for(var t=[],i=0,r=this._feature.geometry;i<r.length;i+=1){var o=r[i];t.push([new e.default$1(o[0],o[1])])}return t}for(var n=[],a=0,s=this._feature.geometry;a<s.length;a+=1){for(var l=[],u=0,h=s[a];u<h.length;u+=1){var c=h[u];l.push(new e.default$1(c[0],c[1]))}n.push(l)}return n},E.prototype.toGeoJSON=function(e,t,i){return A.call(this,e,t,i)};var B=function(t){this.layers={_geojsonTileLayer:this},this.name="_geojsonTileLayer",this.extent=e.default$8,this.length=t.length,this._features=t};B.prototype.feature=function(e){return new E(this._features[e])};var N=e.__moduleExports.VectorTileFeature,R=F;function F(e,t){this.options=t||{},this.features=e,this.length=e.length}function G(e,t){this.id="number"==typeof e.id?e.id:void 0,this.type=e.type,this.rawGeometry=1===e.type?[e.geometry]:e.geometry,this.properties=e.tags,this.extent=t||4096}F.prototype.feature=function(e){return new G(this.features[e],this.options.extent)},G.prototype.loadGeometry=function(){var t=this.rawGeometry;this.geometry=[];for(var i=0;i<t.length;i++){for(var r=t[i],o=[],n=0;n<r.length;n++)o.push(new e.default$31(r[n][0],r[n][1]));this.geometry.push(o)}return this.geometry},G.prototype.bbox=function(){this.geometry||this.loadGeometry();for(var e=this.geometry,t=1/0,i=-1/0,r=1/0,o=-1/0,n=0;n<e.length;n++)for(var a=e[n],s=0;s<a.length;s++){var l=a[s];t=Math.min(t,l.x),i=Math.max(i,l.x),r=Math.min(r,l.y),o=Math.max(o,l.y)}return[t,r,i,o]},G.prototype.toGeoJSON=N.prototype.toGeoJSON;var V=Z,J=Z,W=function(e,t){t=t||{};var i={};for(var r in e)i[r]=new R(e[r].features,t),i[r].name=r,i[r].version=t.version,i[r].extent=t.extent;return Z({layers:i})},Y=R;function Z(t){var i=new e.__moduleExports$1;return function(e,t){for(var i in e.layers)t.writeMessage(3,j,e.layers[i])}(t,i),i.finish()}function j(e,t){var i;t.writeVarintField(15,e.version||1),t.writeStringField(1,e.name||""),t.writeVarintField(5,e.extent||4096);var r={keys:[],values:[],keycache:{},valuecache:{}};for(i=0;i<e.length;i++)r.feature=e.feature(i),t.writeMessage(2,X,r);var o=r.keys;for(i=0;i<o.length;i++)t.writeStringField(3,o[i]);var n=r.values;for(i=0;i<n.length;i++)t.writeMessage(4,K,n[i])}function X(e,t){var i=e.feature;void 0!==i.id&&t.writeVarintField(1,i.id),t.writeMessage(2,q,e),t.writeVarintField(3,i.type),t.writeMessage(4,Q,i)}function q(e,t){var i=e.feature,r=e.keys,o=e.values,n=e.keycache,a=e.valuecache;for(var s in i.properties){var l=n[s];void 0===l&&(r.push(s),l=r.length-1,n[s]=l),t.writeVarint(l);var u=i.properties[s],h=typeof u;"string"!==h&&"boolean"!==h&&"number"!==h&&(u=JSON.stringify(u));var c=h+":"+u,f=a[c];void 0===f&&(o.push(u),f=o.length-1,a[c]=f),t.writeVarint(f)}}function U(e,t){return(t<<3)+(7&e)}function H(e){return e<<1^e>>31}function Q(e,t){for(var i=e.loadGeometry(),r=e.type,o=0,n=0,a=i.length,s=0;s<a;s++){var l=i[s],u=1;1===r&&(u=l.length),t.writeVarint(U(1,u));for(var h=3===r?l.length-1:l.length,c=0;c<h;c++){1===c&&1!==r&&t.writeVarint(U(2,h-1));var f=l[c].x-o,p=l[c].y-n;t.writeVarint(H(f)),t.writeVarint(H(p)),o+=f,n+=p}3===r&&t.writeVarint(U(7,0))}}function K(e,t){var i=typeof e;"string"===i?t.writeStringField(1,e):"boolean"===i?t.writeBooleanField(7,e):"number"===i&&(e%1!=0?t.writeDoubleField(3,e):e<0?t.writeSVarintField(6,e):t.writeVarintField(5,e))}V.fromVectorTileJs=J,V.fromGeojsonVt=W,V.GeoJSONWrapper=Y;var ee=function e(t,i,r,o,n,a){if(n-o<=r)return;var s=Math.floor((o+n)/2);!function e(t,i,r,o,n,a){for(;n>o;){if(n-o>600){var s=n-o+1,l=r-o+1,u=Math.log(s),h=.5*Math.exp(2*u/3),c=.5*Math.sqrt(u*h*(s-h)/s)*(l-s/2<0?-1:1),f=Math.max(o,Math.floor(r-l*h/s+c)),p=Math.min(n,Math.floor(r+(s-l)*h/s+c));e(t,i,r,f,p,a)}var d=i[2*r+a],g=o,v=n;for(te(t,i,o,r),i[2*n+a]>d&&te(t,i,o,n);g<v;){for(te(t,i,g,v),g++,v--;i[2*g+a]<d;)g++;for(;i[2*v+a]>d;)v--}i[2*o+a]===d?te(t,i,o,v):te(t,i,++v,n),v<=r&&(o=v+1),r<=v&&(n=v-1)}}(t,i,s,o,n,a%2);e(t,i,r,o,s-1,a+1);e(t,i,r,s+1,n,a+1)};function te(e,t,i,r){ie(e,i,r),ie(t,2*i,2*r),ie(t,2*i+1,2*r+1)}function ie(e,t,i){var r=e[t];e[t]=e[i],e[i]=r}var re=function(e,t,i,r,o,n,a){var s,l,u=[0,e.length-1,0],h=[];for(;u.length;){var c=u.pop(),f=u.pop(),p=u.pop();if(f-p<=a)for(var d=p;d<=f;d++)s=t[2*d],l=t[2*d+1],s>=i&&s<=o&&l>=r&&l<=n&&h.push(e[d]);else{var g=Math.floor((p+f)/2);s=t[2*g],l=t[2*g+1],s>=i&&s<=o&&l>=r&&l<=n&&h.push(e[g]);var v=(c+1)%2;(0===c?i<=s:r<=l)&&(u.push(p),u.push(g-1),u.push(v)),(0===c?o>=s:n>=l)&&(u.push(g+1),u.push(f),u.push(v))}}return h};var oe=function(e,t,i,r,o,n){var a=[0,e.length-1,0],s=[],l=o*o;for(;a.length;){var u=a.pop(),h=a.pop(),c=a.pop();if(h-c<=n)for(var f=c;f<=h;f++)ne(t[2*f],t[2*f+1],i,r)<=l&&s.push(e[f]);else{var p=Math.floor((c+h)/2),d=t[2*p],g=t[2*p+1];ne(d,g,i,r)<=l&&s.push(e[p]);var v=(u+1)%2;(0===u?i-o<=d:r-o<=g)&&(a.push(c),a.push(p-1),a.push(v)),(0===u?i+o>=d:r+o>=g)&&(a.push(p+1),a.push(h),a.push(v))}}return s};function ne(e,t,i,r){var o=e-i,n=t-r;return o*o+n*n}var ae=function(e,t,i,r,o){return new se(e,t,i,r,o)};function se(e,t,i,r,o){t=t||le,i=i||ue,o=o||Array,this.nodeSize=r||64,this.points=e,this.ids=new o(e.length),this.coords=new o(2*e.length);for(var n=0;n<e.length;n++)this.ids[n]=n,this.coords[2*n]=t(e[n]),this.coords[2*n+1]=i(e[n]);ee(this.ids,this.coords,this.nodeSize,0,this.ids.length-1,0)}function le(e){return e[0]}function ue(e){return e[1]}se.prototype={range:function(e,t,i,r){return re(this.ids,this.coords,e,t,i,r,this.nodeSize)},within:function(e,t,i){return oe(this.ids,this.coords,e,t,i,this.nodeSize)}};var he=function(e){return new ce(e)};function ce(e){this.options=me(Object.create(this.options),e),this.trees=new Array(this.options.maxZoom+1)}function fe(e,t,i,r,o){return{x:e,y:t,zoom:1/0,id:r,properties:o,parentId:-1,numPoints:i}}function pe(e,t){var i=e.geometry.coordinates;return{x:ve(i[0]),y:ye(i[1]),zoom:1/0,id:t,parentId:-1}}function de(e){return{type:"Feature",properties:ge(e),geometry:{type:"Point",coordinates:[(r=e.x,360*(r-.5)),(t=e.y,i=(180-360*t)*Math.PI/180,360*Math.atan(Math.exp(i))/Math.PI-90)]}};var t,i,r}function ge(e){var t=e.numPoints,i=t>=1e4?Math.round(t/1e3)+"k":t>=1e3?Math.round(t/100)/10+"k":t;return me(me({},e.properties),{cluster:!0,cluster_id:e.id,point_count:t,point_count_abbreviated:i})}function ve(e){return e/360+.5}function ye(e){var t=Math.sin(e*Math.PI/180),i=.5-.25*Math.log((1+t)/(1-t))/Math.PI;return i<0?0:i>1?1:i}function me(e,t){for(var i in t)e[i]=t[i];return e}function xe(e){return e.x}function we(e){return e.y}ce.prototype={options:{minZoom:0,maxZoom:16,radius:40,extent:512,nodeSize:64,log:!1,reduce:null,initial:function(){return{}},map:function(e){return e}},load:function(e){var t=this.options.log;t&&console.time("total time");var i="prepare "+e.length+" points";t&&console.time(i),this.points=e;var r=e.map(pe);t&&console.timeEnd(i);for(var o=this.options.maxZoom;o>=this.options.minZoom;o--){var n=+Date.now();this.trees[o+1]=ae(r,xe,we,this.options.nodeSize,Float32Array),r=this._cluster(r,o),t&&console.log("z%d: %d clusters in %dms",o,r.length,+Date.now()-n)}return this.trees[this.options.minZoom]=ae(r,xe,we,this.options.nodeSize,Float32Array),t&&console.timeEnd("total time"),this},getClusters:function(e,t){for(var i=this.trees[this._limitZoom(t)],r=i.range(ve(e[0]),ye(e[3]),ve(e[2]),ye(e[1])),o=[],n=0;n<r.length;n++){var a=i.points[r[n]];o.push(a.numPoints?de(a):this.points[a.id])}return o},getChildren:function(e,t){for(var i=this.trees[t+1].points[e],r=this.options.radius/(this.options.extent*Math.pow(2,t)),o=this.trees[t+1].within(i.x,i.y,r),n=[],a=0;a<o.length;a++){var s=this.trees[t+1].points[o[a]];s.parentId===e&&n.push(s.numPoints?de(s):this.points[s.id])}return n},getLeaves:function(e,t,i,r){i=i||10,r=r||0;var o=[];return this._appendLeaves(o,e,t,i,r,0),o},getTile:function(e,t,i){var r=this.trees[this._limitZoom(e)],o=Math.pow(2,e),n=this.options.extent,a=this.options.radius/n,s=(i-a)/o,l=(i+1+a)/o,u={features:[]};return this._addTileFeatures(r.range((t-a)/o,s,(t+1+a)/o,l),r.points,t,i,o,u),0===t&&this._addTileFeatures(r.range(1-a/o,s,1,l),r.points,o,i,o,u),t===o-1&&this._addTileFeatures(r.range(0,s,a/o,l),r.points,-1,i,o,u),u.features.length?u:null},getClusterExpansionZoom:function(e,t){for(;t<this.options.maxZoom;){var i=this.getChildren(e,t);if(t++,1!==i.length)break;e=i[0].properties.cluster_id}return t},_appendLeaves:function(e,t,i,r,o,n){for(var a=this.getChildren(t,i),s=0;s<a.length;s++){var l=a[s].properties;if(l.cluster?n+l.point_count<=o?n+=l.point_count:n=this._appendLeaves(e,l.cluster_id,i+1,r,o,n):n<o?n++:e.push(a[s]),e.length===r)break}return n},_addTileFeatures:function(e,t,i,r,o,n){for(var a=0;a<e.length;a++){var s=t[e[a]];n.features.push({type:1,geometry:[[Math.round(this.options.extent*(s.x*o-i)),Math.round(this.options.extent*(s.y*o-r))]],tags:s.numPoints?ge(s):this.points[s.id].properties})}},_limitZoom:function(e){return Math.max(this.options.minZoom,Math.min(e,this.options.maxZoom+1))},_cluster:function(e,t){for(var i=[],r=this.options.radius/(this.options.extent*Math.pow(2,t)),o=0;o<e.length;o++){var n=e[o];if(!(n.zoom<=t)){n.zoom=t;var a=this.trees[t+1],s=a.within(n.x,n.y,r),l=n.numPoints||1,u=n.x*l,h=n.y*l,c=null;this.options.reduce&&(c=this.options.initial(),this._accumulate(c,n));for(var f=0;f<s.length;f++){var p=a.points[s[f]];if(t<p.zoom){var d=p.numPoints||1;p.zoom=t,u+=p.x*d,h+=p.y*d,l+=d,p.parentId=o,this.options.reduce&&this._accumulate(c,p)}}1===l?i.push(n):(n.parentId=o,i.push(fe(u/l,h/l,l,o,c)))}}return i},_accumulate:function(e,t){var i=t.numPoints?t.properties:this.options.map(this.points[t.id].properties);this.options.reduce(e,i)}};var Se=function e(t,i,r,o){var n=o;var a;var s=t[i];var l=t[i+1];var u=t[r];var h=t[r+1];for(var c=i+3;c<r;c+=3){var f=Me(t[c],t[c+1],s,l,u,h);f>n&&(a=c,n=f)}n>o&&(a-i>3&&e(t,i,a,o),t[a+2]=n,r-a>3&&e(t,a,r,o))};function Me(e,t,i,r,o,n){var a=o-i,s=n-r;if(0!==a||0!==s){var l=((e-i)*a+(t-r)*s)/(a*a+s*s);l>1?(i=o,r=n):l>0&&(i+=a*l,r+=s*l)}return(a=e-i)*a+(s=t-r)*s}var be=function(e,t,i,r){var o={id:e||null,type:t,geometry:i,tags:r,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0};return function(e){var t=e.geometry,i=e.type;if("Point"===i||"MultiPoint"===i||"LineString"===i)_e(e,t);else if("Polygon"===i||"MultiLineString"===i)for(var r=0;r<t.length;r++)_e(e,t[r]);else if("MultiPolygon"===i)for(r=0;r<t.length;r++)for(var o=0;o<t[r].length;o++)_e(e,t[r][o])}(o),o};function _e(e,t){for(var i=0;i<t.length;i+=3)e.minX=Math.min(e.minX,t[i]),e.minY=Math.min(e.minY,t[i+1]),e.maxX=Math.max(e.maxX,t[i]),e.maxY=Math.max(e.maxY,t[i+1])}var Ie=function(e,t){var i=[];if("FeatureCollection"===e.type)for(var r=0;r<e.features.length;r++)Te(i,e.features[r],t);else"Feature"===e.type?Te(i,e,t):Te(i,{geometry:e},t);return i};function Te(e,t,i){if(t.geometry){var r=t.geometry.coordinates,o=t.geometry.type,n=i*i,a=[];if("Point"===o)ze(r,a);else if("MultiPoint"===o)for(var s=0;s<r.length;s++)ze(r[s],a);else if("LineString"===o)Pe(r,a,n,!1);else if("MultiLineString"===o)ke(r,a,n,!1);else if("Polygon"===o)ke(r,a,n,!0);else{if("MultiPolygon"!==o){if("GeometryCollection"===o){for(s=0;s<t.geometry.geometries.length;s++)Te(e,{geometry:t.geometry.geometries[s],properties:t.properties},i);return}throw new Error("Input data is not a valid GeoJSON object.")}for(s=0;s<r.length;s++){var l=[];ke(r[s],l,n,!0),a.push(l)}}e.push(be(t.id,o,a,t.properties))}}function ze(e,t){t.push(Le(e[0])),t.push($e(e[1])),t.push(0)}function Pe(e,t,i,r){for(var o,n,a=0,s=0;s<e.length;s++){var l=Le(e[s][0]),u=$e(e[s][1]);t.push(l),t.push(u),t.push(0),s>0&&(a+=r?(o*u-l*n)/2:Math.sqrt(Math.pow(l-o,2)+Math.pow(u-n,2))),o=l,n=u}var h=t.length-3;t[2]=1,Se(t,0,h,i),t[h+2]=1,t.size=Math.abs(a)}function ke(e,t,i,r){for(var o=0;o<e.length;o++){var n=[];Pe(e[o],n,i,r),t.push(n)}}function Le(e){return e/360+.5}function $e(e){var t=Math.sin(e*Math.PI/180),i=.5-.25*Math.log((1+t)/(1-t))/Math.PI;return i<0?0:i>1?1:i}function De(e,t,i,r,o,n){return[Math.round(i*(e*r-o)),Math.round(i*(t*r-n))]}var Oe={tile:function(e,t){if(e.transformed)return e;var i,r,o,n=e.z2,a=e.x,s=e.y;for(i=0;i<e.features.length;i++){var l=e.features[i],u=l.geometry,h=l.type;if(l.geometry=[],1===h)for(r=0;r<u.length;r+=2)l.geometry.push(De(u[r],u[r+1],t,n,a,s));else for(r=0;r<u.length;r++){var c=[];for(o=0;o<u[r].length;o+=2)c.push(De(u[r][o],u[r][o+1],t,n,a,s));l.geometry.push(c)}}return e.transformed=!0,e},point:De},Ce=function(e,t,i,r,o,n,a){if(r/=t,n>=(i/=t)&&a<=r)return e;if(n>r||a<i)return null;for(var s=[],l=0;l<e.length;l++){var u=e[l],h=u.geometry,c=u.type,f=0===o?u.minX:u.minY,p=0===o?u.maxX:u.maxY;if(f>=i&&p<=r)s.push(u);else if(!(f>r||p<i)){var d=[];if("Point"===c||"MultiPoint"===c)Ae(h,d,i,r,o);else if("LineString"===c)Ee(h,d,i,r,o,!1);else if("MultiLineString"===c)Be(h,d,i,r,o,!1);else if("Polygon"===c)Be(h,d,i,r,o,!0);else if("MultiPolygon"===c)for(var g=0;g<h.length;g++){var v=[];Be(h[g],v,i,r,o,!0),v.length&&d.push(v)}d.length&&("LineString"!==c&&"MultiLineString"!==c||(1===d.length?(c="LineString",d=d[0]):c="MultiLineString"),"Point"!==c&&"MultiPoint"!==c||(c=3===d.length?"Point":"MultiPoint"),s.push(be(u.id,c,d,u.tags)))}}return s.length?s:null};function Ae(e,t,i,r,o){for(var n=0;n<e.length;n+=3){var a=e[n+o];a>=i&&a<=r&&(t.push(e[n]),t.push(e[n+1]),t.push(e[n+2]))}}function Ee(e,t,i,r,o,n){for(var a=[],s=0===o?Re:Fe,l=0;l<e.length-3;l+=3){var u=e[l],h=e[l+1],c=e[l+2],f=e[l+3],p=e[l+4],d=0===o?u:h,g=0===o?f:p,v=!1;d<i?g>=i&&s(a,u,h,f,p,i):d>r?g<=r&&s(a,u,h,f,p,r):Ne(a,u,h,c),g<i&&d>=i&&(s(a,u,h,f,p,i),v=!0),g>r&&d<=r&&(s(a,u,h,f,p,r),v=!0),!n&&v&&(a.size=e.size,t.push(a),a=[])}var y=e.length-3;u=e[y],h=e[y+1],c=e[y+2],(d=0===o?u:h)>=i&&d<=r&&Ne(a,u,h,c),y=a.length-3,n&&y>=3&&(a[y]!==a[0]||a[y+1]!==a[1])&&Ne(a,a[0],a[1],a[2]),a.length&&(a.size=e.size,t.push(a))}function Be(e,t,i,r,o,n){for(var a=0;a<e.length;a++)Ee(e[a],t,i,r,o,n)}function Ne(e,t,i,r){e.push(t),e.push(i),e.push(r)}function Re(e,t,i,r,o,n){e.push(n),e.push(i+(n-t)*(o-i)/(r-t)),e.push(1)}function Fe(e,t,i,r,o,n){e.push(t+(n-i)*(r-t)/(o-i)),e.push(n),e.push(1)}var Ge=function(e,t){var i=e,r=Ce(e,1,-1-t,t,0,-1,2),o=Ce(e,1,1-t,2+t,0,-1,2);(r||o)&&(i=Ce(e,1,-t,1+t,0,-1,2)||[],r&&(i=Ve(r,1).concat(i)),o&&(i=i.concat(Ve(o,-1))));return i};function Ve(e,t){for(var i=[],r=0;r<e.length;r++){var o,n=e[r],a=n.type;if("Point"===a||"MultiPoint"===a||"LineString"===a)o=Je(n.geometry,t);else if("MultiLineString"===a||"Polygon"===a){o=[];for(var s=0;s<n.geometry.length;s++)o.push(Je(n.geometry[s],t))}else if("MultiPolygon"===a)for(o=[],s=0;s<n.geometry.length;s++){for(var l=[],u=0;u<n.geometry[s].length;u++)l.push(Je(n.geometry[s][u],t));o.push(l)}i.push(be(n.id,a,o,n.tags))}return i}function Je(e,t){var i=[];i.size=e.size;for(var r=0;r<e.length;r+=3)i.push(e[r]+t,e[r+1],e[r+2]);return i}var We=function(e,t,i,r,o,n){for(var a={features:[],numPoints:0,numSimplified:0,numFeatures:0,source:null,x:i,y:r,z2:t,transformed:!1,minX:2,minY:1,maxX:-1,maxY:0},s=0;s<e.length;s++){a.numFeatures++,Ye(a,e[s],o,n);var l=e[s].minX,u=e[s].minY,h=e[s].maxX,c=e[s].maxY;l<a.minX&&(a.minX=l),u<a.minY&&(a.minY=u),h>a.maxX&&(a.maxX=h),c>a.maxY&&(a.maxY=c)}return a};function Ye(e,t,i,r){var o=t.geometry,n=t.type,a=[];if("Point"===n||"MultiPoint"===n)for(var s=0;s<o.length;s+=3)a.push(o[s]),a.push(o[s+1]),e.numPoints++,e.numSimplified++;else if("LineString"===n)Ze(a,o,e,i,r,!1,!1);else if("MultiLineString"===n||"Polygon"===n)for(s=0;s<o.length;s++)Ze(a,o[s],e,i,r,"Polygon"===n,0===s);else if("MultiPolygon"===n)for(var l=0;l<o.length;l++){var u=o[l];for(s=0;s<u.length;s++)Ze(a,u[s],e,i,r,!0,0===s)}if(a.length){var h={geometry:a,type:"Polygon"===n||"MultiPolygon"===n?3:"LineString"===n||"MultiLineString"===n?2:1,tags:t.tags||null};null!==t.id&&(h.id=t.id),e.features.push(h)}}function Ze(e,t,i,r,o,n,a){var s=r*r;if(!o&&t.size<(n?s:r))i.numPoints+=t.length/3;else{for(var l=[],u=0;u<t.length;u+=3)(o||t[u+2]>s)&&(i.numSimplified++,l.push(t[u]),l.push(t[u+1])),i.numPoints++;n&&function(e,t){for(var i=0,r=0,o=e.length,n=o-2;r<o;n=r,r+=2)i+=(e[r]-e[n])*(e[r+1]+e[n+1]);if(i>0===t)for(r=0,o=e.length;r<o/2;r+=2){var a=e[r],s=e[r+1];e[r]=e[o-2-r],e[r+1]=e[o-1-r],e[o-2-r]=a,e[o-1-r]=s}}(l,a),e.push(l)}}var je=function(e,t){return new Xe(e,t)};function Xe(e,t){var i=(t=this.options=function(e,t){for(var i in t)e[i]=t[i];return e}(Object.create(this.options),t)).debug;if(i&&console.time("preprocess data"),t.maxZoom<0||t.maxZoom>24)throw new Error("maxZoom should be in the 0-24 range");var r=1<<t.maxZoom,o=Ie(e,t.tolerance/(r*t.extent));this.tiles={},this.tileCoords=[],i&&(console.timeEnd("preprocess data"),console.log("index: maxZoom: %d, maxPoints: %d",t.indexMaxZoom,t.indexMaxPoints),console.time("generate tiles"),this.stats={},this.total=0),(o=Ge(o,t.buffer/t.extent)).length&&this.splitTile(o,0,0,0),i&&(o.length&&console.log("features: %d, points: %d",this.tiles[0].numFeatures,this.tiles[0].numPoints),console.timeEnd("generate tiles"),console.log("tiles generated:",this.total,JSON.stringify(this.stats)))}function qe(e,t,i){return 32*((1<<e)*i+t)+e}function Ue(e,t){var i=e.tileID.canonical;if(!this._geoJSONIndex)return t(null,null);var r=this._geoJSONIndex.getTile(i.z,i.x,i.y);if(!r)return t(null,null);var o=new B(r.features),n=V(o);0===n.byteOffset&&n.byteLength===n.buffer.byteLength||(n=new Uint8Array(n)),t(null,{vectorTile:o,rawData:n.buffer})}Xe.prototype.options={maxZoom:14,indexMaxZoom:5,indexMaxPoints:1e5,tolerance:3,extent:4096,buffer:64,debug:0},Xe.prototype.splitTile=function(e,t,i,r,o,n,a){for(var s=[e,t,i,r],l=this.options,u=l.debug;s.length;){r=s.pop(),i=s.pop(),t=s.pop(),e=s.pop();var h=1<<t,c=qe(t,i,r),f=this.tiles[c],p=t===l.maxZoom?0:l.tolerance/(h*l.extent);if(!f&&(u>1&&console.time("creation"),f=this.tiles[c]=We(e,h,i,r,p,t===l.maxZoom),this.tileCoords.push({z:t,x:i,y:r}),u)){u>1&&(console.log("tile z%d-%d-%d (features: %d, points: %d, simplified: %d)",t,i,r,f.numFeatures,f.numPoints,f.numSimplified),console.timeEnd("creation"));var d="z"+t;this.stats[d]=(this.stats[d]||0)+1,this.total++}if(f.source=e,o){if(t===l.maxZoom||t===o)continue;var g=1<<o-t;if(i!==Math.floor(n/g)||r!==Math.floor(a/g))continue}else if(t===l.indexMaxZoom||f.numPoints<=l.indexMaxPoints)continue;if(f.source=null,0!==e.length){u>1&&console.time("clipping");var v,y,m,x,w,S,M=.5*l.buffer/l.extent,b=.5-M,_=.5+M,I=1+M;v=y=m=x=null,w=Ce(e,h,i-M,i+_,0,f.minX,f.maxX),S=Ce(e,h,i+b,i+I,0,f.minX,f.maxX),e=null,w&&(v=Ce(w,h,r-M,r+_,1,f.minY,f.maxY),y=Ce(w,h,r+b,r+I,1,f.minY,f.maxY),w=null),S&&(m=Ce(S,h,r-M,r+_,1,f.minY,f.maxY),x=Ce(S,h,r+b,r+I,1,f.minY,f.maxY),S=null),u>1&&console.timeEnd("clipping"),s.push(v||[],t+1,2*i,2*r),s.push(y||[],t+1,2*i,2*r+1),s.push(m||[],t+1,2*i+1,2*r),s.push(x||[],t+1,2*i+1,2*r+1)}}},Xe.prototype.getTile=function(e,t,i){var r=this.options,o=r.extent,n=r.debug;if(e<0||e>24)return null;var a=1<<e,s=qe(e,t=(t%a+a)%a,i);if(this.tiles[s])return Oe.tile(this.tiles[s],o);n>1&&console.log("drilling down to z%d-%d-%d",e,t,i);for(var l,u=e,h=t,c=i;!l&&u>0;)u--,h=Math.floor(h/2),c=Math.floor(c/2),l=this.tiles[qe(u,h,c)];return l&&l.source?(n>1&&console.log("found parent tile z%d-%d-%d",u,h,c),n>1&&console.time("drilling down"),this.splitTile(l.source,u,h,c,e,t,i),n>1&&console.timeEnd("drilling down"),this.tiles[s]?Oe.tile(this.tiles[s],o):null):null};var He=function(t){function i(e,i,r){t.call(this,e,i,Ue),r&&(this.loadGeoJSON=r)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.loadData=function(e,t){this._pendingCallback&&this._pendingCallback(null,{abandoned:!0}),this._pendingCallback=t,this._pendingLoadDataParams=e,this._state&&"Idle"!==this._state?this._state="NeedsLoadData":(this._state="Coalescing",this._loadData())},i.prototype._loadData=function(){var e=this;if(this._pendingCallback&&this._pendingLoadDataParams){var t=this._pendingCallback,i=this._pendingLoadDataParams;delete this._pendingCallback,delete this._pendingLoadDataParams,this.loadGeoJSON(i,function(r,o){if(r||!o)return t(r);if("object"!=typeof o)return t(new Error("Input data is not a valid GeoJSON object."));$(o,!0);try{e._geoJSONIndex=i.cluster?he(i.superclusterOptions).load(o.features):je(o,i.geojsonVtOptions)}catch(r){return t(r)}e.loaded={};var n={};if(i.request&&i.request.collectResourceTiming){var a=M(i.request.url);a&&(n.resourceTiming={},n.resourceTiming[i.source]=JSON.parse(JSON.stringify(a)))}t(null,n)})}},i.prototype.coalesce=function(){"Coalescing"===this._state?this._state="Idle":"NeedsLoadData"===this._state&&(this._state="Coalescing",this._loadData())},i.prototype.reloadTile=function(e,i){var r=this.loaded,o=e.uid;return r&&r[o]?t.prototype.reloadTile.call(this,e,i):this.loadTile(e,i)},i.prototype.loadGeoJSON=function(t,i){if(t.request)e.getJSON(t.request,i);else{if("string"!=typeof t.data)return i(new Error("Input data is not a valid GeoJSON object."));try{return i(null,JSON.parse(t.data))}catch(e){return i(new Error("Input data is not a valid GeoJSON object."))}}},i.prototype.removeSource=function(e,t){this._pendingCallback&&this._pendingCallback(null,{abandoned:!0}),t()},i}(_),Qe=function(t){var i=this;this.self=t,this.actor=new e.default$7(t,this),this.layerIndexes={},this.workerSourceTypes={vector:_,geojson:He},this.workerSources={},this.demWorkerSources={},this.self.registerWorkerSource=function(e,t){if(i.workerSourceTypes[e])throw new Error('Worker source with name "'+e+'" already registered.');i.workerSourceTypes[e]=t},this.self.registerRTLTextPlugin=function(t){if(e.plugin.applyArabicShaping||e.plugin.processBidirectionalText)throw new Error("RTL text plugin already registered.");e.plugin.applyArabicShaping=t.applyArabicShaping,e.plugin.processBidirectionalText=t.processBidirectionalText}};return Qe.prototype.setLayers=function(e,t,i){this.getLayerIndex(e).replace(t),i()},Qe.prototype.updateLayers=function(e,t,i){this.getLayerIndex(e).update(t.layers,t.removedIds),i()},Qe.prototype.loadTile=function(e,t,i){this.getWorkerSource(e,t.type,t.source).loadTile(t,i)},Qe.prototype.loadDEMTile=function(e,t,i){this.getDEMWorkerSource(e,t.source).loadTile(t,i)},Qe.prototype.reloadTile=function(e,t,i){this.getWorkerSource(e,t.type,t.source).reloadTile(t,i)},Qe.prototype.abortTile=function(e,t,i){this.getWorkerSource(e,t.type,t.source).abortTile(t,i)},Qe.prototype.removeTile=function(e,t,i){this.getWorkerSource(e,t.type,t.source).removeTile(t,i)},Qe.prototype.removeDEMTile=function(e,t){this.getDEMWorkerSource(e,t.source).removeTile(t)},Qe.prototype.removeSource=function(e,t,i){if(this.workerSources[e]&&this.workerSources[e][t.type]&&this.workerSources[e][t.type][t.source]){var r=this.workerSources[e][t.type][t.source];delete this.workerSources[e][t.type][t.source],void 0!==r.removeSource?r.removeSource(t,i):i()}},Qe.prototype.loadWorkerSource=function(e,t,i){try{this.self.importScripts(t.url),i()}catch(e){i(e)}},Qe.prototype.loadRTLTextPlugin=function(t,i,r){try{e.plugin.applyArabicShaping||e.plugin.processBidirectionalText||(this.self.importScripts(i),e.plugin.applyArabicShaping&&e.plugin.processBidirectionalText||r(new Error("RTL Text Plugin failed to import scripts from "+i)))}catch(e){r(e)}},Qe.prototype.getLayerIndex=function(e){var t=this.layerIndexes[e];return t||(t=this.layerIndexes[e]=new r),t},Qe.prototype.getWorkerSource=function(e,t,i){var r=this;if(this.workerSources[e]||(this.workerSources[e]={}),this.workerSources[e][t]||(this.workerSources[e][t]={}),!this.workerSources[e][t][i]){var o={send:function(t,i,o){r.actor.send(t,i,o,e)}};this.workerSources[e][t][i]=new this.workerSourceTypes[t](o,this.getLayerIndex(e))}return this.workerSources[e][t][i]},Qe.prototype.getDEMWorkerSource=function(e,t){return this.demWorkerSources[e]||(this.demWorkerSources[e]={}),this.demWorkerSources[e][t]||(this.demWorkerSources[e][t]=new I),this.demWorkerSources[e][t]},"undefined"!=typeof WorkerGlobalScope&&"undefined"!=typeof self&&self instanceof WorkerGlobalScope&&new Qe(self),Qe});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
